// Code generated by protoc-gen-go.
// source: arith.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	arith.proto
	echo.proto

It has these top-level messages:
	ArithRequest
	ArithResponse
	EchoRequest
	EchoResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import "log"
import "net/rpc"
import "github.com/liuyuanlin/rmqrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArithRequest struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *ArithRequest) Reset()                    { *m = ArithRequest{} }
func (m *ArithRequest) String() string            { return proto.CompactTextString(m) }
func (*ArithRequest) ProtoMessage()               {}
func (*ArithRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArithRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *ArithRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type ArithResponse struct {
	C int32 `protobuf:"varint,1,opt,name=c" json:"c,omitempty"`
}

func (m *ArithResponse) Reset()                    { *m = ArithResponse{} }
func (m *ArithResponse) String() string            { return proto.CompactTextString(m) }
func (*ArithResponse) ProtoMessage()               {}
func (*ArithResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArithResponse) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func init() {
	proto.RegisterType((*ArithRequest)(nil), "service.ArithRequest")
	proto.RegisterType((*ArithResponse)(nil), "service.ArithResponse")
}

type ArithService interface {
	Add(in *ArithRequest, out *ArithResponse) error
	Mul(in *ArithRequest, out *ArithResponse) error
	Div(in *ArithRequest, out *ArithResponse) error
	Error(in *ArithRequest, out *ArithResponse) error
}

// StartArithServiceServer start one rpc server
func StartArithServiceServer(uri string, exchangeName string, queueName string, x ArithService) (err error) {
	srv := rpc.NewServer()
	if err = srv.RegisterName("ArithService", x); err != nil {
		log.Fatal(err)
		return
	}

	go srv.ServeCodec(rmqrpc.NewServerCodec(uri, exchangeName, queueName))
	return
}

// RegisterArithService publish the given ArithService implementation on the server.
func RegisterArithService(srv *rpc.Server, x ArithService) error {
	if err := srv.RegisterName("ArithService", x); err != nil {
		return err
	}
	return nil
}

// NewArithServiceServer returns a new ArithService Server.
func NewArithServiceServer(x ArithService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

type ArithServiceClient struct {
	*rpc.Client
}

// NewArithServiceClient returns a ArithService stub to handle
// requests to the set of ArithService at the other end of the connection.
func NewArithServiceClient(uri string, exchangeName string, queueName string) *ArithServiceClient {
	c := rpc.NewClientWithCodec(rmqrpc.NewClientCodec(uri, exchangeName, queueName))
	return &ArithServiceClient{c}
}

func (c *ArithServiceClient) Add(in *ArithRequest) (out *ArithResponse, err error) {
	if in == nil {
		in = new(ArithRequest)
	}
	out = new(ArithResponse)
	if err = c.Call("ArithService.Add", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *ArithServiceClient) Mul(in *ArithRequest) (out *ArithResponse, err error) {
	if in == nil {
		in = new(ArithRequest)
	}
	out = new(ArithResponse)
	if err = c.Call("ArithService.Mul", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *ArithServiceClient) Div(in *ArithRequest) (out *ArithResponse, err error) {
	if in == nil {
		in = new(ArithRequest)
	}
	out = new(ArithResponse)
	if err = c.Call("ArithService.Div", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *ArithServiceClient) Error(in *ArithRequest) (out *ArithResponse, err error) {
	if in == nil {
		in = new(ArithRequest)
	}
	out = new(ArithResponse)
	if err = c.Call("ArithService.Error", in, out); err != nil {
		return nil, err
	}
	return out, nil
}

func init() { proto.RegisterFile("arith.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0xca, 0x2c,
	0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0x55, 0xd2, 0xe2, 0xe2, 0x71, 0x04, 0x89, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1,
	0x70, 0x31, 0x26, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x26, 0x82, 0x78, 0x49, 0x12,
	0x4c, 0x10, 0x5e, 0x92, 0x92, 0x2c, 0x17, 0x2f, 0x54, 0x6d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a,
	0x48, 0x3a, 0x19, 0xa6, 0x38, 0xd9, 0xe8, 0x05, 0x23, 0xd4, 0xac, 0x60, 0x88, 0xd9, 0x42, 0x26,
	0x5c, 0xcc, 0x89, 0x29, 0x29, 0x42, 0xa2, 0x7a, 0x50, 0xcb, 0xf4, 0x90, 0x6d, 0x92, 0x12, 0x43,
	0x17, 0x86, 0x1a, 0x6a, 0xc2, 0xc5, 0x9c, 0x5b, 0x9a, 0x43, 0x86, 0xae, 0x94, 0xcc, 0x32, 0x52,
	0x75, 0x99, 0x71, 0xb1, 0xa6, 0x16, 0x15, 0xe5, 0x17, 0x91, 0xa8, 0x2f, 0x89, 0x0d, 0x1c, 0x8a,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x62, 0xfd, 0xbd, 0x54, 0x01, 0x00, 0x00,
}
